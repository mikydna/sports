// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// F1Client is the client API for F1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type F1Client interface {
	Position(ctx context.Context, in *PositionRequest, opts ...grpc.CallOption) (F1_PositionClient, error)
}

type f1Client struct {
	cc grpc.ClientConnInterface
}

func NewF1Client(cc grpc.ClientConnInterface) F1Client {
	return &f1Client{cc}
}

func (c *f1Client) Position(ctx context.Context, in *PositionRequest, opts ...grpc.CallOption) (F1_PositionClient, error) {
	stream, err := c.cc.NewStream(ctx, &_F1_serviceDesc.Streams[0], "/f1.F1/position", opts...)
	if err != nil {
		return nil, err
	}
	x := &f1PositionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type F1_PositionClient interface {
	Recv() (*PositionFrame, error)
	grpc.ClientStream
}

type f1PositionClient struct {
	grpc.ClientStream
}

func (x *f1PositionClient) Recv() (*PositionFrame, error) {
	m := new(PositionFrame)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// F1Server is the server API for F1 service.
// All implementations must embed UnimplementedF1Server
// for forward compatibility
type F1Server interface {
	Position(*PositionRequest, F1_PositionServer) error
	mustEmbedUnimplementedF1Server()
}

// UnimplementedF1Server must be embedded to have forward compatible implementations.
type UnimplementedF1Server struct {
}

func (UnimplementedF1Server) Position(*PositionRequest, F1_PositionServer) error {
	return status.Errorf(codes.Unimplemented, "method Position not implemented")
}
func (UnimplementedF1Server) mustEmbedUnimplementedF1Server() {}

// UnsafeF1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to F1Server will
// result in compilation errors.
type UnsafeF1Server interface {
	mustEmbedUnimplementedF1Server()
}

func RegisterF1Server(s grpc.ServiceRegistrar, srv F1Server) {
	s.RegisterService(&_F1_serviceDesc, srv)
}

func _F1_Position_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PositionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(F1Server).Position(m, &f1PositionServer{stream})
}

type F1_PositionServer interface {
	Send(*PositionFrame) error
	grpc.ServerStream
}

type f1PositionServer struct {
	grpc.ServerStream
}

func (x *f1PositionServer) Send(m *PositionFrame) error {
	return x.ServerStream.SendMsg(m)
}

var _F1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "f1.F1",
	HandlerType: (*F1Server)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "position",
			Handler:       _F1_Position_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "f1.proto",
}
